 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/my_apps", type: :request do
  
  # MyApp. As you add validations to MyApp, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {params: {title: "My application", javascript_origins: "http:://localhost"}}
  }

  let(:my_app){ FactoryBot.create(:my_app) }

  let(:invalid_attributes) {
    { title: "" }
  }

   before :each do
     puts("desde el each #{my_app.user_id}")
     request.session[:user_id] = my_app.user.id
   end

  describe "GET /new" do
    it "renders a successful response" do
      get new_my_app_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      get edit_my_app_url(my_app)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new MyApp" do
        expect {
          post my_apps_url, params: { my_app: valid_attributes }
        }.to change(MyApp, :count).by(1)
      end

      it "redirects to the created my_app" do
        post my_apps_url, params: { my_app: valid_attributes }
        #post :create, params: { my_app: valid_attributes }
        expect(response).to redirect_to("/")
      end
    end

    context "with invalid parameters" do
      it "does not create a new MyApp" do
        expect {
          post my_apps_url, params: { my_app: invalid_attributes }
          #post :create, params: { my_app: invalid_attributes }
        }.to change(MyApp, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        #post my_apps_url, params: { my_app: invalid_attributes }
        post :create, params: { my_app: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested my_app" do
        patch my_app_url(my_app), params: { my_app: new_attributes }
        my_app.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the my_app" do
        patch my_app_url(my_app), params: { my_app: new_attributes }
        my_app.reload
        expect(response).to redirect_to(my_app_url(my_app))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch my_app_url(my_app), params: { my_app: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested my_app" do
      expect {
        delete my_app_url(my_app)
      }.to change(MyApp, :count).by(-1)
    end

    it "redirects to the my_apps list" do
      delete my_app_url(my_app)
      expect(response).to redirect_to(my_apps_url)
    end
  end
end
